apiVersion: v1
kind: Service
metadata:
  name: tomcat
spec:
  ports:
    - name: tomcat
      protocol: TCP
      port: 80
      targetPort: 8080
  selector:
    app: tomcat
  {{- if (eq "GKE" .Values.cloudService.provider) }}
  type: NodePort
  {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: tomcat-jmx
spec:
  ports:
    - name: jmx
      protocol: TCP
      port: 8888
      targetPort: 8888
  selector:
    app: tomcat
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tomcat  
spec:
  replicas: 0
  selector:
    matchLabels:
      app: tomcat
  template:
    metadata:
      name: tomcat
      labels:
        app: tomcat
        tier: frontend
        container_name: tomcat
        environment: {{ .Values.label.ENVIRONMENT }}
    spec:
      serviceAccountName: common-service-account
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: tomcat-pvc
      - name: keys
        secret:
          secretName: ms-license-key
      - name: fluentd-config
        configMap:
          name: tomcat-fluentd-config
      - name: tomcat-config
        configMap:
          name: tomcat-config
      containers:
      - name: tomcat
        image: {{required "Image Info is mandatory! Read the Project Documentation to understand what and where to configure." .Values.image.TOMCAT }}
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_NAME
          value: tomcat
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: TOMCAT_JAVA_XMX
          valueFrom:
            configMapKeyRef:
              name: resource-config
              key: TOMCAT_JAVA_XMX
        - name: CLASSPATH
          value: "/usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar"
        ports:
        - name: tomcat
          containerPort: 8080
        - name: jmx
          containerPort: 8888
        {{- with ( pluck .Values.resourceUnit.size .Values.resourceUnit | first ) }}
        resources:
          limits:
            memory: {{ .memory.max.TOMCAT }}Mi
            cpu: {{ .cpu.max.TOMCAT }}m
          requests:
            memory: {{ .memory.max.TOMCAT }}Mi
            cpu: {{ .cpu.max.TOMCAT }}m
        {{- end }}
        volumeMounts:
        - mountPath: /opt/MetricStream/SYSTEMi
          subPath: SYSTEMi
          name: data
        - mountPath: /opt/MetricStream/SYSTEMi/Systemi/keys
          name: keys
        - mountPath: /data/metricstream
          name: data
          subPath: ms_data
        - mountPath: /usr/local/tomcat/conf
          name: data
          subPath: conf
        - mountPath: /usr/local/tomcat/logs
          name: data
          subPath: logs
        - mountPath: /usr/local/tomcat/work
          name: data
          subPath: work
        - mountPath: /tmp
          name: data
          subPath: tomcat_tmp
        securityContext:
          readOnlyRootFilesystem: true
      - name: libreoffice
        image: {{required "Image Info is mandatory! Read the Project Documentation to understand what and where to configure." .Values.image.LIBREOFFICE }}
        imagePullPolicy: IfNotPresent
        {{- with ( pluck .Values.resourceUnit.size .Values.resourceUnit | first ) }}
        resources:
          limits:
            memory: {{ .memory.max.LIBREOFFICE }}Mi
            cpu: {{ .cpu.max.LIBREOFFICE }}m
          requests:
            memory: {{ .memory.max.LIBREOFFICE }}Mi
            cpu: {{ .cpu.max.LIBREOFFICE }}m
        {{- end }}
        ports:
        - name: libreoffice
          containerPort: 8997
        volumeMounts:
        - mountPath: /opt/MetricStream/SYSTEMi
          subPath: SYSTEMi
          name: data
        - mountPath: /opt/libreoffice
          subPath: libre_home
          name: data
        - mountPath: /tmp
          subPath: libre_tmp
          name: data
        - mountPath: /var/tmp
          subPath: libre_var_tmp
          name: data
        securityContext:
          readOnlyRootFilesystem: true
      imagePullSecrets:
      - name: container-registry-key
      securityContext:
        runAsUser: 1000
        runAsNonRoot: true
        fsGroup: 1000
      allowedCapabilities: null
